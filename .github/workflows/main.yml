name: C++ CI with Qt and vcpkg

# This workflow runs on pushes to the main branch and pull requests targeting it
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # We will run this on the latest Windows virtual machine
    runs-on: windows-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # --- HELPER DEBUGGING STEP ---
      - name: List files in the repository
        run: Get-ChildItem -Recurse
        shell: powershell

      # Step 2: Install the required version of Qt
      # This uses a community action to install Qt automatically
      - name: Install Qt
        id: install-qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.9.1' # Make sure this matches your Qt version
          arch: 'win64_msvc2022_64'

      # Step 3: Cache vcpkg to speed up future builds
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: D:/a/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/CMakeLists.txt') }}

      # Step 4: Setup vcpkg
      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git D:/a/vcpkg
          cd D:/a/vcpkg
          ./bootstrap-vcpkg.bat
        shell: cmd

      # Step 5: Install dependencies using vcpkg
      - name: Install dependencies
        run: |
          cd D:/a/vcpkg
          ./vcpkg.exe install openssl:x64-windows

      # Step 6: Configure the project with CMake
      # We use the Qt path from the 'Install Qt' step and point to the vcpkg toolchain
      - name: Configure CMake
        run: >
          cmake -B build
          -G "Visual Studio 17 2022"
          -DQt6_DIR=${{ steps.install-qt.outputs.qtPath }}/lib/cmake/Qt6
          -DCMAKE_TOOLCHAIN_FILE=D:/a/vcpkg/scripts/buildsystems/vcpkg.cmake
        env:
          # This environment variable is used by the Qt action
          QT_VERSION: '6.9.1'

      # Step 7: Build the project (both the app and the tests)
      - name: Build
        run: cmake --build build --config Debug

      # Step 8: Run the Google Tests
      # The '|| exit 1' part is not strictly needed as a non-zero exit code will fail the step anyway,
      # but it makes the intent clear.
      - name: Run tests
        run: build/Debug/run_tests.exe

      # Step 9 (Optional): Upload the built application as an artifact
      # This lets you download the compiled .exe and .dlls from the GitHub Actions run.
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Final-Game-Windows
          path: build/Debug/